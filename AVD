#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

// 함수 프로토타입
void setupPins();
void checkDrivingButton();
void checkRfid();
void checkUltrasonicSensor();
void endDrivingSession();

// RFID 모듈 관련 변수
const int SS_PIN = 11;
const int RST_PIN = 10;
MFRC522 rfid(SS_PIN, RST_PIN);
unsigned long lastRfidCheckTime = 0;
const unsigned long rfidCheckInterval = 1000; // RFID 체크 간격 (단위: ms)
bool isPhoneDetected = false;

// 초음파 센서 및 LED, 부저 핀 설정
const int trigPin = 9;
const int echoPin = 8;
const int redLedPin = A0;
const int buzzerPin = A1;
const int drivingButtonPin = A2;
const int distanceThreshold = 10; // 터치를 감지할 거리 임계값 (단위: cm)
const int debounceDelay = 100; // 터치 해제 딜레이 (단위: ms)
const int touchThreshold = 20; // 터치 횟수 임계값
bool isTouchDetected = false;
unsigned long lastTouchTime = 0;
int touchCount = 0;

// LCD 핀 설정
const int rs = 2, en = 3, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// 운전 중 상태 체크 관련 변수
bool isDriving = false;
unsigned long lastButtonPressTime = 0; // 버튼 디바운스 처리를 위한 시간 변수

void setup() {
    Serial.begin(9600);
    SPI.begin();
    rfid.PCD_Init();
    lcd.begin(16, 2); // LCD 초기화 (16x2 크기)
    setupPins();
    digitalWrite(redLedPin, LOW);
    digitalWrite(buzzerPin, LOW);
}

void loop() {
    checkDrivingButton();
    
    if (isDriving) {
        checkRfid();
        
        if (!isPhoneDetected) {
            digitalWrite(redLedPin, HIGH);
            tone(buzzerPin, 1000);
        } else {
            digitalWrite(redLedPin, LOW);
            noTone(buzzerPin);
            checkUltrasonicSensor();
        }
    } else {
        digitalWrite(redLedPin, LOW);
        noTone(buzzerPin);
    }
}

void setupPins() {
    pinMode(echoPin, INPUT);
    pinMode(trigPin, OUTPUT);
    pinMode(redLedPin, OUTPUT);
    pinMode(buzzerPin, OUTPUT);
    pinMode(drivingButtonPin, INPUT_PULLUP);
}

void checkDrivingButton() {
    if (digitalRead(drivingButtonPin) == LOW && millis() - lastButtonPressTime > debounceDelay) {
        isDriving = !isDriving;
        Serial.print("Driving status: ");
        Serial.println(isDriving ? "Driving" : "Not driving");
        lastButtonPressTime = millis();
        delay(300);

        if (!isDriving) {
            endDrivingSession();
        }
    }
}

void checkRfid() {
    if (millis() - lastRfidCheckTime > rfidCheckInterval) {
        lastRfidCheckTime = millis();
        if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
            isPhoneDetected = true;
            Serial.println("Phone detected!");
            rfid.PICC_HaltA();
        } else {
            isPhoneDetected = false;
            Serial.println("Phone not detected!");
        }
    }
}

void checkUltrasonicSensor() {
    long duration, distance;
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    
    duration = pulseIn(echoPin, HIGH);
    distance = ((float)(duration) / 2.0) * 0.0343;
    
    if (distance < distanceThreshold) {
        if (!isTouchDetected) {
            isTouchDetected = true;
            touchCount++;
            Serial.print("Touch Count: ");
            Serial.println(touchCount);
        }
        lastTouchTime = millis();
    } else {
        if (isTouchDetected && (millis() - lastTouchTime > debounceDelay)) {
            isTouchDetected = false;
        }
    }
    delay(50);
}

void endDrivingSession() {
    lcd.clear();
    if (touchCount > touchThreshold) {
        lcd.print("Too many touches!");
    } else {
        lcd.print("Good job!");
    }
    delay(5000);
    lcd.clear();
    lcd.print("Touch Count: ");
    lcd.setCursor(0, 1);
    lcd.print(touchCount);

    touchCount = 0;
    isTouchDetected = false;
    isPhoneDetected = false;
    digitalWrite(redLedPin, LOW);
    digitalWrite(buzzerPin, LOW);
}
